package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"
	userpb "mariusihring.dev/services/rpc/user"
	"strconv"

	"mariusihring.dev/graphql/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	var last_name string
	if input.LastName != nil {
		last_name = *input.LastName
	} else {
		last_name = ""
	}
	var first_name string
	if input.FirstName != nil {
		first_name = *input.FirstName
	} else {
		first_name = ""
	}
	resp, err := r.UserService.Client.CreateUser(ctx, &userpb.NewUserRequest{
		LastName:     last_name,
		FirstName:    first_name,
		UserName:     input.UserName,
		Email:        input.Email,
		PasswordHash: input.PasswordHash,
	})
	if err != nil {
		return nil, err
	}
	user_id := strconv.FormatInt(resp.Id, 10)

	return &model.User{
		ID:        user_id,
		LastName:  &resp.LastName,
		FirstName: &resp.FirstName,
		UserName:  resp.UserName,
		Email:     resp.Email,
		AddedAt:   resp.CreatedAt,
		UpdatedAt: resp.UpdatedAt,
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	resp, err := r.UserService.Client.UpdateUser(ctx, &userpb.NewUserRequest{
		LastName:     *input.LastName,
		FirstName:    *input.FirstName,
		UserName:     *input.UserName,
		Email:        *input.Email,
		PasswordHash: *input.PasswordHash,
	})
	if err != nil {
		return nil, err
	}
	user_id := strconv.FormatInt(resp.Id, 10)

	return &model.User{
		ID:        user_id,
		LastName:  &resp.LastName,
		FirstName: &resp.FirstName,
		UserName:  resp.UserName,
		Email:     resp.Email,
		AddedAt:   resp.CreatedAt,
		UpdatedAt: resp.UpdatedAt,
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context, id string) (*model.User, error) {
	user_id, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, err
	}
	resp, err := r.UserService.Client.GetUser(ctx, &userpb.UserRequest{
		Id: user_id,
	})
	if err != nil {
		return nil, err
	}
	return &model.User{
		ID:        id,
		LastName:  &resp.LastName,
		FirstName: &resp.FirstName,
		UserName:  resp.UserName,
		Email:     resp.Email,
		AddedAt:   resp.CreatedAt,
		UpdatedAt: resp.UpdatedAt,
	}, nil
}
